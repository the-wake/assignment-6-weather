var apiKey = "6ef0014aabef8562491a8623c83179b3";
var cityName = "";

var form = document.getElementById('submissionForm');
var histList = document.getElementById('searchHistory');

var forecastHead = $('#cityEl');
var todayImg = $('#todayImg');
var todayTemp = $('#tempEl');
var todayWind = $('#elwind');
var todayHumid = $('#humidEl');
var todayUv = $('#uvEl');
var histList = document.getElementById('searchHistory');
var longTerm = document.getElementById('longTerm');
var searchText = document.getElementById('searchBar');

var maxDays = 5;
var maxCities = 10;
var unitVar = "imperial";
var scaleVar = "Â°F"
var cities = [];
var nowWeather = {};
var dayForecast = {};
var nDays = {};

// Could set something to make this happen only if cityName exists.

function setDay() {
    var dateVar = moment().format("dddd, MMMM DD, YYYY");
    var timestamp = document.getElementById("currentDay");
    date.textContent=(dateVar);
};

function logSubmit(event) {
    event.preventDefault();
    if (!searchText.value) {
        alert("Please enter a city.")
    } else {

        var cityEntry = document.getElementById('searchBar').value;
        cityName = cityEntry;
        var requestUrl = "https://api.openweathermap.org/data/2.5/weather?q=" + cityName + "&units=" + unitVar + "&appid=" + apiKey;
        var forecastUrl = "https://api.openweathermap.org/data/2.5/forecast?q=" + cityName + "&units=" + unitVar + "&cnt=" + maxDays + "&appid=" + apiKey;
        fetch(requestUrl)
        .then(function (response) {
            if (response.ok) {
                return response.json();
            }
        })
        .then(function (data) {
            if(!(data === undefined)) {
                console.log(data);
                if (cities.includes(cityName) == 0) {
                cities.push(cityEntry);
            };
            localStorage.setItem("cityStorage", JSON.stringify(cities));
            populate();
            runWeather();
            fetch(forecastUrl)
            .then(function (response) {
                if (response.ok) {
                    return response.json();
                } else {
                    return Promise.reject();
                }
            })
            .then(function (data) {
                nDays=data.list;
                displayForecast();
            })
            .catch(function (error) {
                console.log(error);
            })
            } else {
                // TODO: Fill entry in alert.
                alert("City not found.")
            }
        })
    }
};

// I think this can be done in fewer steps if we set a variable for the function and pass that when the function is called. This works fine; just something to think about.
function runWeather() {
    var requestUrl = "https://api.openweathermap.org/data/2.5/weather?q=" + cityName + "&units=" + unitVar + "&appid=" + apiKey;
    var forecastUrl = "https://api.openweathermap.org/data/2.5/forecast?q=" + cityName + "&units=" + unitVar + "&cnt=" + maxDays + "&appid=" + apiKey;
    fetch(requestUrl)
    .then(function (response) {
        if (response.ok) {
            console.log("OK");
            return response.json();
        }
    })
    .then(function (data) {
        console.log(data);
        nowWeather=data;
        // Wrapped these functions inside the promise so that they don't fire until the data is returned.
        displayWeather();
    });
    fetch(forecastUrl)
    .then(function (response) {
        if (response.ok) {
            return response.json();
        } else {
            return Promise.reject();
        }
    })
    .then(function (data) {
        nDays=data.list;
        displayForecast();
    })
    .catch(function (error) {
        console.log(error);
    })
};

// function(location) {
    // var {lat} = location
    // var {lon} = location
// }
// This will deconstruct the object generated by the first call.

function histClick(event) {
    if (event.target.matches("button")) {
        var cityEntry = event.target.textContent;
        searchText.value=(cityEntry);
        cityName = cityEntry;
        runWeather();
    };
};

function displayWeather() {
    var picture=nowWeather.weather[0].icon;
    forecastHead.text(`Today's Forecast: ${cityName}`);
    todayImg.attr("src", `http://openweathermap.org/img/w/${picture}.png`)
    todayTemp.text("Temp: " + nowWeather.main.temp + " " + scaleVar);
    todayWind.text("Wind: " + nowWeather.wind.speed + " mph");
    todayHumid.text("Humidity: " + nowWeather.main.humidity + "%");
    todayUv.text("UV Index: " + nowWeather.main);
};

// Haven't made this repopulate when re-entered.

function displayForecast() {
    for (var i = 0; i < nDays.length; i++) {
        dayForecast[i] = nDays[i];
        var forecastBlock = document.createElement("div");
        forecastBlock.className="forecastBlock";
        var forecastDay = document.createElement("h6");
        forecastDay.className="forecastEl";
        forecastDay.textContent=dayForecast[i].dt;
        var forecastTemp = document.createElement("p");
        forecastTemp.className="forecastEl";
        forecastTemp.textContent=dayForecast[i].main.temp;
        var forecastWind = document.createElement("p");
        forecastWind.className="forecastEl";
        forecastWind.textContent=dayForecast[i].wind.speed;
        var forecastHumid = document.createElement("p");
        forecastHumid.className="forecastEl";
        forecastHumid.textContent=dayForecast[i].main.humidity;
        var forecastUv = document.createElement("p");
        forecastUv.className="forecastEl";
        forecastUv.textContent=dayForecast[i].main;
        forecastBlock.appendChild(forecastDay);
        forecastBlock.appendChild(forecastTemp);
        forecastBlock.appendChild(forecastWind);
        forecastBlock.appendChild(forecastHumid);
        forecastBlock.appendChild(forecastUv);
        longTerm.appendChild(forecastBlock);
    }
};

// Add function to search a city when clicked from history.

function populate() {
    // Clears the list before populating it again.
    histList.innerHTML="";
    var cityPop = JSON.parse(localStorage.getItem("cityStorage"));
    for (var i = 0; i < cityPop.length; i++) {
        cities[i] = cityPop[i];
        // Put in a function to snip the cities array to the right size, to check for duplicates, and to validate entry. Can probably use if (response.status === 404) or response.ok to help with that.
        var cityButton = document.createElement("button");
        cityButton.className="cityButton";
        cityButton.textContent=cities[i];
        searchHistory.appendChild(cityButton);
    };
};

form.addEventListener('submit', logSubmit);
searchHistory.addEventListener('click', histClick);

setDay();
populate();


// Do loop with if length > max length, then i = array.length-1 and i-- 10 times.
